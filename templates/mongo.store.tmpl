package mongodb

import (
	"net/http"

	"{{ $.Namespace }}/helpers"
	"{{ $.Namespace }}/helpers/params"
	"{{ $.Namespace }}/models"
	"github.com/globalsign/mgo/bson"
)

{{ $sing := singularize .ModelName }}
{{- range .Methods  }}
    {{- if eq . "Create" }}
        // Create{{ title $sing }} checks if {{ firstLower $sing }}  already exists, and if not, creates it
        func (db *mongo) Create{{ title $sing }}({{ firstLower $sing }} *models.{{ title $sing }}) error {
            session := db.Session.Copy()
            defer session.Close()
            {{ firstLower $sing }}s := db.C(models.{{ title $sing }}sCollection).With(session)

            {{ firstLower $sing }}.Id = bson.NewObjectId().Hex()
            err := {{ firstLower $sing }}.BeforeCreate()
            if err != nil {
                return err
            }

            err = {{ firstLower $sing }}s.Insert({{ firstLower $sing }})
            if err != nil {
                return helpers.NewError(http.StatusInternalServerError, "{{ firstLower $sing }}_creation_failed", "Failed to insert the {{ firstLower $sing }} in the database", err)
            }

            return nil
        }
    {{- else if eq . "Get" }}
        // Find{{ title $sing }}ById allows to retrieve a {{ firstLower $sing }} by its id
        func (db *mongo) Find{{ title $sing }}ById(id string) (*models.{{ title $sing }}, error) {
            session := db.Session.Copy()
            defer session.Close()
            {{ firstLower $sing }}s := db.C(models.{{ title $sing }}sCollection).With(session)

            {{ firstLower $sing }} := &models.{{ title $sing }}{}
            err := {{ firstLower $sing }}s.FindId(id).One({{ firstLower $sing }})
            if err != nil {
                return nil, helpers.NewError(http.StatusNotFound, "{{ firstLower $sing }}_not_found", "{{ title $sing }} not found", err)
            }

            return {{ firstLower $sing }}, err
        }
    {{- else if eq . "GetAll" }}
        // GetAll{{ title $sing }} allows to get all {{ firstLower $sing }}s
        func (db *mongo) GetAll{{ title $sing }}() ([]*models.{{ title $sing }}, error) {
            session := db.Session.Copy()
            defer session.Close()

            {{ firstLower $sing }}s := db.C(models.{{ title $sing }}sCollection).With(session)

            list := []*models.{{ title $sing }}{}
            if err := {{ firstLower $sing }}s.Find(params.M{}).All(&list); err != nil {
                return nil, helpers.NewError(http.StatusNotFound, "{{ firstLower $sing }}s_not_found", "{{ title $sing }} not found", err)
            }

            return list, nil
        }
    {{- else if eq . "Update" }}
        // Update{{ title $sing }} allows to update one or more {{ firstLower $sing }} characteristics
        func (db *mongo) Update{{ title $sing }}({{ firstLower $sing }}Id string, params params.M) error {
            session := db.Session.Copy()
            defer session.Close()
            {{ firstLower $sing }}s := db.C(models.{{ title $sing }}sCollection).With(session)

            if err := {{ firstLower $sing }}s.UpdateId({{ firstLower $sing }}Id, params); err != nil {
                return helpers.NewError(http.StatusInternalServerError, "{{ firstLower $sing }}_update_failed", "Failed to update the {{ firstLower $sing }}", err)
            }

            return nil
        }
    {{- else if eq . "Delete" }}
        // Delete{{ title $sing }} allows to delete a {{ firstLower $sing }} by its id
        func (db *mongo) Delete{{ title $sing }}({{ firstLower $sing }} *models.{{ title $sing }}, {{ firstLower $sing }}Id string) error {
            session := db.Session.Copy()
            defer session.Close()
            {{ firstLower $sing }}s := db.C(models.{{ title $sing }}sCollection).With(session)

            err := {{ firstLower $sing }}s.Remove(bson.M{"_id": {{ firstLower $sing }}Id})
            if err != nil {
                return helpers.NewError(http.StatusInternalServerError, "{{ firstLower $sing }}_delete_failed", "Failed to delete the {{ firstLower $sing }}", err)
            }

            return nil
        }
    {{- end }}
{{- end }}
